{"remainingRequest":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js!F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\waterManager\\water_admin\\node_modules\\@jiaminghi\\data-view\\lib\\components\\activeRingChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\waterManager\\water_admin\\node_modules\\@jiaminghi\\data-view\\lib\\components\\activeRingChart\\src\\main.vue","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\babel.config.js","mtime":1646632679840},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["name","components","dvDigitalFlop","props","config","type","default","data","defaultConfig","radius","activeRadius","value","lineWidth","activeTimeGap","color","digitalFlopStyle","fontSize","fill","digitalFlopToFixed","digitalFlopUnit","animationCurve","animationFrame","showOriginValue","mergedConfig","chart","activeIndex","animationHandler","computed","digitalFlop","displayValue","content","number","style","toFixed","ringName","watch","clearTimeout","mergeConfig","setRingOption","methods","init","initChart","deepClone","ringAnimation","getRingOption","dataItem","series","outsideLabel","show","getRealRadius","realRadius","mounted","beforeDestroy"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/activeRingChart/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-active-ring-chart\">\n    <div class=\"active-ring-chart-container\" ref=\"active-ring-chart\" />\n    <div class=\"active-ring-info\">\n      <dv-digital-flop :config=\"digitalFlop\" />\n      <div class=\"active-ring-name\" :style=\"fontSize\">{{ ringName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Charts from '@jiaminghi/charts'\n\nimport dvDigitalFlop from '../../digitalFlop/src/main.vue'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{ name: '', value: 0 }],\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n        /**\n         * @description Digital flop unit\n         * @type {String}\n         */\n        digitalFlopUnit: '',\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50,\n        /**\n         * @description showOriginValue\n         * @type {Boolean}\n         * @default showOriginValue = false\n         */\n        showOriginValue: false\n      },\n\n      mergedConfig: null,\n\n      chart: null,\n\n      activeIndex: 0,\n\n      animationHandler: ''\n    }\n  },\n  computed: {\n    digitalFlop() {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return {}\n\n      const {\n        digitalFlopStyle,\n        digitalFlopToFixed,\n        data,\n        showOriginValue,\n        digitalFlopUnit\n      } = mergedConfig\n\n      const value = data.map(({ value }) => value)\n\n      let displayValue\n\n      if (showOriginValue) {\n        displayValue = value[activeIndex]\n      } else {\n        const sum = value.reduce((all, v) => all + v, 0)\n\n        const percent = parseFloat((value[activeIndex] / sum) * 100) || 0\n\n        displayValue = percent\n      }\n\n      return {\n        content: showOriginValue ? `{nt}${digitalFlopUnit}` : `{nt}${digitalFlopUnit || '%'}`,\n        number: [displayValue],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      }\n    },\n    ringName() {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return ''\n\n      return mergedConfig.data[activeIndex].name\n    },\n    fontSize() {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      return `font-size: ${mergedConfig.digitalFlopStyle.fontSize}px;`\n    }\n  },\n  watch: {\n    config() {\n      const { animationHandler, mergeConfig, setRingOption } = this\n\n      clearTimeout(animationHandler)\n\n      this.activeIndex = 0\n\n      mergeConfig()\n\n      setRingOption()\n    }\n  },\n  methods: {\n    init() {\n      const { initChart, mergeConfig, setRingOption } = this\n\n      initChart()\n\n      mergeConfig()\n\n      setRingOption()\n    },\n    initChart() {\n      const { $refs } = this\n\n      this.chart = new Charts($refs['active-ring-chart'])\n    },\n    mergeConfig() {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(\n        deepClone(defaultConfig, true),\n        config || {}\n      )\n    },\n    setRingOption() {\n      const { getRingOption, chart, ringAnimation } = this\n\n      const option = getRingOption()\n\n      chart.setOption(option, true)\n\n      ringAnimation()\n    },\n    getRingOption() {\n      const { mergedConfig, getRealRadius } = this\n\n      const radius = getRealRadius()\n\n      mergedConfig.data.forEach(dataItem => {\n        dataItem.radius = radius\n      })\n\n      return {\n        series: [\n          {\n            type: 'pie',\n            ...mergedConfig,\n            outsideLabel: {\n              show: false\n            }\n          }\n        ],\n        color: mergedConfig.color\n      }\n    },\n    getRealRadius(active = false) {\n      const { mergedConfig, chart } = this\n\n      const { radius, activeRadius, lineWidth } = mergedConfig\n\n      const maxRadius = Math.min(...chart.render.area) / 2\n\n      const halfLineWidth = lineWidth / 2\n\n      let realRadius = active ? activeRadius : radius\n\n      if (typeof realRadius !== 'number')\n        realRadius = (parseInt(realRadius) / 100) * maxRadius\n\n      const insideRadius = realRadius - halfLineWidth\n      const outSideRadius = realRadius + halfLineWidth\n\n      return [insideRadius, outSideRadius]\n    },\n    ringAnimation() {\n      let { activeIndex, getRingOption, chart, getRealRadius } = this\n\n      const radius = getRealRadius()\n      const active = getRealRadius(true)\n\n      const option = getRingOption()\n\n      const { data } = option.series[0]\n\n      data.forEach((dataItem, i) => {\n        if (i === activeIndex) {\n          dataItem.radius = active\n        } else {\n          dataItem.radius = radius\n        }\n      })\n\n      chart.setOption(option, true)\n\n      const { activeTimeGap } = option.series[0]\n\n      this.animationHandler = setTimeout(foo => {\n        activeIndex += 1\n\n        if (activeIndex >= data.length) activeIndex = 0\n\n        this.activeIndex = activeIndex\n\n        this.ringAnimation()\n      }, activeTimeGap)\n    }\n  },\n  mounted() {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy() {\n    const { animationHandler } = this\n\n    clearTimeout(animationHandler)\n  }\n}\n</script>"]}]}