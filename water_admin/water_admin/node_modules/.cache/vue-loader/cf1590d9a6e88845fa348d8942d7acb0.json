{"remainingRequest":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\waterManager\\water_admin\\src\\components\\page\\contrast.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\waterManager\\water_admin\\src\\components\\page\\contrast.vue","mtime":1652175392175},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["contrast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"contrast.vue","sourceRoot":"src/components/page","sourcesContent":["<!--\r\n * @Author: Tashany\r\n * @Date: 2022-04-16 16:12:09\r\n * @LastEditors: Tashany\r\n * @LastEditTime: 2022-05-10 17:36:32\r\n * @Description: file content\r\n * @FilePath: \\water_admin\\src\\components\\page\\contrast.vue\r\n-->\r\n<template>\r\n    <div class=\"com-container\">\r\n        <div class=\"title\" :style=\"comStyle\">\r\n            <span>▎实际水位高度 VS 5分钟后预测水位高度 （单位 mm）</span>\r\n            <span class=\"iconfont title-icon\"></span>\r\n        </div>\r\n        <div class=\"com-chart\" ref=\"contrast\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {\r\n        getConnect\r\n    } from '@/api/user.js'\r\n    export default {\r\n        data() {\r\n            return {\r\n                chartInstance: null,\r\n                // 返回服务器的数据\r\n                allData: null,\r\n                type: 'line',\r\n                titleFontSize: null, //指明标题字体大小\r\n                xData: null,\r\n            }\r\n        },\r\n        created() {\r\n            // 再组件创建完成时创建回调函数\r\n            this.$socket.registerCallBack(\"contrast\", this.getData)\r\n        },\r\n        mounted() {\r\n            this.initChart()\r\n            this.getData()\r\n            window.addEventListener('resize', this.screenAdapter)\r\n            this.screenAdapter()\r\n            // getConnect()\r\n        },\r\n        destroyed() {\r\n            window.removeEventListener('resize', this.screenAdapter)\r\n            // 销毁时取消回调函数\r\n            this.$socket.unRegisterCallBack(this.getData)\r\n        },\r\n        computed: {\r\n            // 设置给标题的样式\r\n            comStyle() {\r\n                return {\r\n                    fontSize: this.titleFontSize + 'px'\r\n                }\r\n\r\n            }\r\n        },\r\n        methods: {\r\n            // 初始化echartInstance对象\r\n            initChart() {\r\n                this.chartInstance = this.$echarts.init(this.$refs.contrast, 'chalk')\r\n                const initOption = {\r\n                    // 设置直接坐标系坐标轴大写\r\n                    grid: {\r\n                        left: '5%',\r\n                        top: '35%',\r\n                        right: '4%',\r\n                        bottom: '1%',\r\n                        containLabel: true\r\n                    },\r\n                    xAxis: {\r\n                        // 取消间隙\r\n                        type: 'category',\r\n                        // boundaryGap: false\r\n                    },\r\n                    yAxis: {\r\n\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        formatter: '{b0}({a0}): {c0}<br />{b1}({a1}): {c1}%'\r\n                    },\r\n                }\r\n                this.chartInstance.setOption(initOption)\r\n            },\r\n            // 获取服务器数据\r\n            getData(ret) {\r\n                this.allData = JSON.parse(ret)\r\n                this.updateChart()\r\n            },\r\n            // 更新图表\r\n            updateChart() {\r\n                this.xData = this.allData.measureTime.map(item => {\r\n                    return item.split(\" \")[1]\r\n                })\r\n                const y1 = this.allData.waterHeight.map(item => {\r\n                    return item\r\n                })\r\n                const y2 = this.allData.predictionHeight.map(item => {\r\n                    return item\r\n                })\r\n                /*数组排序*/\r\n                this.xData.sort();\r\n                const option = {\r\n                    //图例\r\n                    legend: {\r\n                        data: ['实际水位高度', '预测水位高度'],\r\n                        top: '15%',\r\n                        textStyle: {\r\n                            fontSize: 10,\r\n\r\n                        },\r\n                    },\r\n                    xAxis: {\r\n                        type: 'category',\r\n                        data: this.xData\r\n                    },\r\n                    yAxis: [{\r\n                        type: 'value',\r\n                        name: '实际水位高度',\r\n                        show: true,\r\n                        smooth: true,\r\n                        showSymbol: true,\r\n                        symbol: 'circle', //设定为实心点\r\n                        symbolSize: 3, //设定实心点的大小\r\n                        markPoint: { //显示一定区域内的最大值和最小值\r\n                            data: [{\r\n                                    type: 'max',\r\n                                    name: '最大值'\r\n                                },\r\n                                {\r\n                                    type: 'min',\r\n                                    name: '最小值'\r\n                                }\r\n                            ]\r\n                        },\r\n                        axisLine: {\r\n                            lineStyle: {\r\n                                color: '#5e859e',\r\n                                width: 2\r\n                            }\r\n                        },\r\n                        nameLocation: 'center',\r\n                        nameTextStyle: {\r\n                            fontSize: 10\r\n                        },\r\n                        nameGap: 25\r\n                    }, {\r\n                        type: 'value',\r\n                        name: '预测水位高度',\r\n                        smooth: true,\r\n                        showSymbol: true,\r\n                        symbol: 'circle', //设定为实心点\r\n                        symbolSize: 5, //设定实心点的大小\r\n                        markPoint: { //显示一定区域内的最大值和最小值\r\n                            data: [{\r\n                                    type: 'average',\r\n                                    name: '平均值'\r\n                                }\r\n                            ]\r\n                        },\r\n                        axisLabel: {\r\n                            show: true,\r\n                            interval: 'auto'\r\n                        },\r\n                        axisLine: {\r\n                            lineStyle: {\r\n                                color: '#5e859e', //纵坐标轴和字体颜色\r\n                                width: 2,\r\n                            }\r\n                        },\r\n                        axisLabel: {\r\n                            formatter: function (value) {\r\n                                // Function formatter\r\n                                return value + ' mm'\r\n                            }\r\n                        },\r\n                        nameLocation: 'center',\r\n                        nameTextStyle: {\r\n                            fontSize: 10\r\n                        },\r\n                        nameGap: 5\r\n                    }],\r\n\r\n                    series: [{\r\n                        name: '实际水位高度',\r\n                        type: 'bar',\r\n                        barWidth: '25%',\r\n                        data: y1\r\n                    }, {\r\n                        name: '预测水位高度',\r\n                        type: 'line',\r\n                        smooth: true,\r\n                        data: y2\r\n                    }],\r\n\r\n\r\n                    // legend:{\r\n                    //   data:['水位变化速度']\r\n                    // }\r\n                }\r\n                this.chartInstance.setOption(option)\r\n            },\r\n            // 屏幕大小适配 图标自适应\r\n            screenAdapter() {\r\n                // 得到图标容器宽度-》获取字体大小\r\n                this.titleFontSize = (this.$refs.contrast.offsetWidth / 100) * 3.6\r\n                const adapterOption = {\r\n                    legend: {\r\n                        itemWidth: this.titleFontSize,\r\n                        itemHeight: this.titleFontSize,\r\n                        itemGap: this.titleFontSize,\r\n                        textStyle: {\r\n                            fontSize: this.titleFontSize / 2\r\n                        }\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(adapterOption)\r\n                this.chartInstance.resize()\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .title {\r\n        position: absolute;\r\n        left: 10px;\r\n        top: 10px;\r\n        z-index: 10;\r\n        color: white;\r\n\r\n        .title-icon {\r\n            margin-left: 10px;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n</style>"]}]}