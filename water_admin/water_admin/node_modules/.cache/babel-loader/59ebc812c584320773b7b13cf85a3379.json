{"remainingRequest":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js!F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\waterManager\\water_admin\\src\\components\\page\\contrast.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\waterManager\\water_admin\\src\\components\\page\\contrast.vue","mtime":1652175392175},{"path":"F:\\waterManager\\water_admin\\babel.config.js","mtime":1646632679840},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJGOi93YXRlck1hbmFnZXIvd2F0ZXJfYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZ2V0Q29ubmVjdCB9IGZyb20gJ0AvYXBpL3VzZXIuanMnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNoYXJ0SW5zdGFuY2U6IG51bGwsCiAgICAgIC8vIOi/lOWbnuacjeWKoeWZqOeahOaVsOaNrgogICAgICBhbGxEYXRhOiBudWxsLAogICAgICB0eXBlOiAnbGluZScsCiAgICAgIHRpdGxlRm9udFNpemU6IG51bGwsCiAgICAgIC8v5oyH5piO5qCH6aKY5a2X5L2T5aSn5bCPCiAgICAgIHhEYXRhOiBudWxsCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIC8vIOWGjee7hOS7tuWIm+W7uuWujOaIkOaXtuWIm+W7uuWbnuiwg+WHveaVsAogICAgdGhpcy4kc29ja2V0LnJlZ2lzdGVyQ2FsbEJhY2soImNvbnRyYXN0IiwgdGhpcy5nZXREYXRhKTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmluaXRDaGFydCgpOwogICAgdGhpcy5nZXREYXRhKCk7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zY3JlZW5BZGFwdGVyKTsKICAgIHRoaXMuc2NyZWVuQWRhcHRlcigpOyAvLyBnZXRDb25uZWN0KCkKICB9LAogIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkKCkgewogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2NyZWVuQWRhcHRlcik7IC8vIOmUgOavgeaXtuWPlua2iOWbnuiwg+WHveaVsAoKICAgIHRoaXMuJHNvY2tldC51blJlZ2lzdGVyQ2FsbEJhY2sodGhpcy5nZXREYXRhKTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvLyDorr7nva7nu5nmoIfpopjnmoTmoLflvI8KICAgIGNvbVN0eWxlOiBmdW5jdGlvbiBjb21TdHlsZSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBmb250U2l6ZTogdGhpcy50aXRsZUZvbnRTaXplICsgJ3B4JwogICAgICB9OwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLy8g5Yid5aeL5YyWZWNoYXJ0SW5zdGFuY2Xlr7nosaEKICAgIGluaXRDaGFydDogZnVuY3Rpb24gaW5pdENoYXJ0KCkgewogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UgPSB0aGlzLiRlY2hhcnRzLmluaXQodGhpcy4kcmVmcy5jb250cmFzdCwgJ2NoYWxrJyk7CiAgICAgIHZhciBpbml0T3B0aW9uID0gewogICAgICAgIC8vIOiuvue9ruebtOaOpeWdkOagh+ezu+WdkOagh+i9tOWkp+WGmQogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIGxlZnQ6ICc1JScsCiAgICAgICAgICB0b3A6ICczNSUnLAogICAgICAgICAgcmlnaHQ6ICc0JScsCiAgICAgICAgICBib3R0b206ICcxJScsCiAgICAgICAgICBjb250YWluTGFiZWw6IHRydWUKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICAvLyDlj5bmtojpl7TpmpkKICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScgLy8gYm91bmRhcnlHYXA6IGZhbHNlCgogICAgICAgIH0sCiAgICAgICAgeUF4aXM6IHt9LAogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHRyaWdnZXI6ICdheGlzJywKICAgICAgICAgIGZvcm1hdHRlcjogJ3tiMH0oe2EwfSk6IHtjMH08YnIgLz57YjF9KHthMX0pOiB7YzF9JScKICAgICAgICB9CiAgICAgIH07CiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oaW5pdE9wdGlvbik7CiAgICB9LAogICAgLy8g6I635Y+W5pyN5Yqh5Zmo5pWw5o2uCiAgICBnZXREYXRhOiBmdW5jdGlvbiBnZXREYXRhKHJldCkgewogICAgICB0aGlzLmFsbERhdGEgPSBKU09OLnBhcnNlKHJldCk7CiAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKTsKICAgIH0sCiAgICAvLyDmm7TmlrDlm77ooagKICAgIHVwZGF0ZUNoYXJ0OiBmdW5jdGlvbiB1cGRhdGVDaGFydCgpIHsKICAgICAgdmFyIF9yZWY7CgogICAgICB0aGlzLnhEYXRhID0gdGhpcy5hbGxEYXRhLm1lYXN1cmVUaW1lLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtLnNwbGl0KCIgIilbMV07CiAgICAgIH0pOwogICAgICB2YXIgeTEgPSB0aGlzLmFsbERhdGEud2F0ZXJIZWlnaHQubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW07CiAgICAgIH0pOwogICAgICB2YXIgeTIgPSB0aGlzLmFsbERhdGEucHJlZGljdGlvbkhlaWdodC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbTsKICAgICAgfSk7CiAgICAgIC8q5pWw57uE5o6S5bqPKi8KCiAgICAgIHRoaXMueERhdGEuc29ydCgpOwogICAgICB2YXIgb3B0aW9uID0gewogICAgICAgIC8v5Zu+5L6LCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBkYXRhOiBbJ+WunumZheawtOS9jemrmOW6picsICfpooTmtYvmsLTkvY3pq5jluqYnXSwKICAgICAgICAgIHRvcDogJzE1JScsCiAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgZm9udFNpemU6IDEwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB4QXhpczogewogICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgIGRhdGE6IHRoaXMueERhdGEKICAgICAgICB9LAogICAgICAgIHlBeGlzOiBbewogICAgICAgICAgdHlwZTogJ3ZhbHVlJywKICAgICAgICAgIG5hbWU6ICflrp7pmYXmsLTkvY3pq5jluqYnLAogICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgIHNtb290aDogdHJ1ZSwKICAgICAgICAgIHNob3dTeW1ib2w6IHRydWUsCiAgICAgICAgICBzeW1ib2w6ICdjaXJjbGUnLAogICAgICAgICAgLy/orr7lrprkuLrlrp7lv4PngrkKICAgICAgICAgIHN5bWJvbFNpemU6IDMsCiAgICAgICAgICAvL+iuvuWumuWunuW/g+eCueeahOWkp+WwjwogICAgICAgICAgbWFya1BvaW50OiB7CiAgICAgICAgICAgIC8v5pi+56S65LiA5a6a5Yy65Z+f5YaF55qE5pyA5aSn5YC85ZKM5pyA5bCP5YC8CiAgICAgICAgICAgIGRhdGE6IFt7CiAgICAgICAgICAgICAgdHlwZTogJ21heCcsCiAgICAgICAgICAgICAgbmFtZTogJ+acgOWkp+WAvCcKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIHR5cGU6ICdtaW4nLAogICAgICAgICAgICAgIG5hbWU6ICfmnIDlsI/lgLwnCiAgICAgICAgICAgIH1dCiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgbGluZVN0eWxlOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjNWU4NTllJywKICAgICAgICAgICAgICB3aWR0aDogMgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbmFtZUxvY2F0aW9uOiAnY2VudGVyJywKICAgICAgICAgIG5hbWVUZXh0U3R5bGU6IHsKICAgICAgICAgICAgZm9udFNpemU6IDEwCiAgICAgICAgICB9LAogICAgICAgICAgbmFtZUdhcDogMjUKICAgICAgICB9LCAoX3JlZiA9IHsKICAgICAgICAgIHR5cGU6ICd2YWx1ZScsCiAgICAgICAgICBuYW1lOiAn6aKE5rWL5rC05L2N6auY5bqmJywKICAgICAgICAgIHNtb290aDogdHJ1ZSwKICAgICAgICAgIHNob3dTeW1ib2w6IHRydWUsCiAgICAgICAgICBzeW1ib2w6ICdjaXJjbGUnLAogICAgICAgICAgLy/orr7lrprkuLrlrp7lv4PngrkKICAgICAgICAgIHN5bWJvbFNpemU6IDUsCiAgICAgICAgICAvL+iuvuWumuWunuW/g+eCueeahOWkp+WwjwogICAgICAgICAgbWFya1BvaW50OiB7CiAgICAgICAgICAgIC8v5pi+56S65LiA5a6a5Yy65Z+f5YaF55qE5pyA5aSn5YC85ZKM5pyA5bCP5YC8CiAgICAgICAgICAgIGRhdGE6IFt7CiAgICAgICAgICAgICAgdHlwZTogJ2F2ZXJhZ2UnLAogICAgICAgICAgICAgIG5hbWU6ICflubPlnYflgLwnCiAgICAgICAgICAgIH1dCiAgICAgICAgICB9LAogICAgICAgICAgYXhpc0xhYmVsOiB7CiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIGludGVydmFsOiAnYXV0bycKICAgICAgICAgIH0sCiAgICAgICAgICBheGlzTGluZTogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogJyM1ZTg1OWUnLAogICAgICAgICAgICAgIC8v57q15Z2Q5qCH6L205ZKM5a2X5L2T6aKc6ImyCiAgICAgICAgICAgICAgd2lkdGg6IDIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCAiYXhpc0xhYmVsIiwgewogICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHsKICAgICAgICAgICAgLy8gRnVuY3Rpb24gZm9ybWF0dGVyCiAgICAgICAgICAgIHJldHVybiB2YWx1ZSArICcgbW0nOwogICAgICAgICAgfQogICAgICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgIm5hbWVMb2NhdGlvbiIsICdjZW50ZXInKSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICJuYW1lVGV4dFN0eWxlIiwgewogICAgICAgICAgZm9udFNpemU6IDEwCiAgICAgICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCAibmFtZUdhcCIsIDUpLCBfcmVmKV0sCiAgICAgICAgc2VyaWVzOiBbewogICAgICAgICAgbmFtZTogJ+WunumZheawtOS9jemrmOW6picsCiAgICAgICAgICB0eXBlOiAnYmFyJywKICAgICAgICAgIGJhcldpZHRoOiAnMjUlJywKICAgICAgICAgIGRhdGE6IHkxCiAgICAgICAgfSwgewogICAgICAgICAgbmFtZTogJ+mihOa1i+awtOS9jemrmOW6picsCiAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICBzbW9vdGg6IHRydWUsCiAgICAgICAgICBkYXRhOiB5MgogICAgICAgIH1dIC8vIGxlZ2VuZDp7CiAgICAgICAgLy8gICBkYXRhOlsn5rC05L2N5Y+Y5YyW6YCf5bqmJ10KICAgICAgICAvLyB9CgogICAgICB9OwogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKG9wdGlvbik7CiAgICB9LAogICAgLy8g5bGP5bmV5aSn5bCP6YCC6YWNIOWbvuagh+iHqumAguW6lAogICAgc2NyZWVuQWRhcHRlcjogZnVuY3Rpb24gc2NyZWVuQWRhcHRlcigpIHsKICAgICAgLy8g5b6X5Yiw5Zu+5qCH5a655Zmo5a695bqmLeOAi+iOt+WPluWtl+S9k+Wkp+WwjwogICAgICB0aGlzLnRpdGxlRm9udFNpemUgPSB0aGlzLiRyZWZzLmNvbnRyYXN0Lm9mZnNldFdpZHRoIC8gMTAwICogMy42OwogICAgICB2YXIgYWRhcHRlck9wdGlvbiA9IHsKICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgIGl0ZW1XaWR0aDogdGhpcy50aXRsZUZvbnRTaXplLAogICAgICAgICAgaXRlbUhlaWdodDogdGhpcy50aXRsZUZvbnRTaXplLAogICAgICAgICAgaXRlbUdhcDogdGhpcy50aXRsZUZvbnRTaXplLAogICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLnRpdGxlRm9udFNpemUgLyAyCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGFkYXB0ZXJPcHRpb24pOwogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UucmVzaXplKCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAoBA,SACAA,UADA,QAEA,eAFA;AAGA;AACAC,MADA,kBACA;AACA;AACAC,yBADA;AAEA;AACAC,mBAHA;AAIAC,kBAJA;AAKAC,yBALA;AAKA;AACAC;AANA;AAQA,GAVA;AAWAC,SAXA,qBAWA;AACA;AACA;AACA,GAdA;AAeAC,SAfA,qBAeA;AACA;AACA;AACAC;AACA,yBAJA,CAKA;AACA,GArBA;AAsBAC,WAtBA,uBAsBA;AACAD,6DADA,CAEA;;AACA;AACA,GA1BA;AA2BAE;AACA;AACAC,YAFA,sBAEA;AACA;AACAC;AADA;AAIA;AAPA,GA3BA;AAoCAC;AACA;AACAC,aAFA,uBAEA;AACA;AACA;AACA;AACAC;AACAC,oBADA;AAEAC,oBAFA;AAGAC,qBAHA;AAIAC,sBAJA;AAKAC;AALA,SAFA;AASAC;AACA;AACAlB,0BAFA,CAGA;;AAHA,SATA;AAcAmB,iBAdA;AAiBAC;AACAC,yBADA;AAEAC;AAFA;AAjBA;AAsBA;AACA,KA3BA;AA4BA;AACAC,WA7BA,mBA6BAC,GA7BA,EA6BA;AACA;AACA;AACA,KAhCA;AAiCA;AACAC,eAlCA,yBAkCA;AAAA;;AACA;AACA;AACA,OAFA;AAGA;AACA;AACA,OAFA;AAGA;AACA;AACA,OAFA;AAGA;;AACA;AACA;AACA;AACAC;AACA7B,oCADA;AAEAiB,oBAFA;AAGAa;AACAlB;AADA;AAHA,SAFA;AAUAS;AACAlB,0BADA;AAEAH;AAFA,SAVA;AAcAsB;AACAnB,uBADA;AAEA4B,wBAFA;AAGAC,oBAHA;AAIAC,sBAJA;AAKAC,0BALA;AAMAC,0BANA;AAMA;AACAC,uBAPA;AAOA;AACAC;AAAA;AACArC;AACAG,yBADA;AAEA4B;AAFA,eAIA;AACA5B,yBADA;AAEA4B;AAFA,aAJA;AADA,WARA;AAmBAO;AACAC;AACAC,8BADA;AAEAC;AAFA;AADA,WAnBA;AAyBAC,gCAzBA;AA0BAC;AACA/B;AADA,WA1BA;AA6BAgC;AA7BA;AA+BAzC,uBA/BA;AAgCA4B,wBAhCA;AAiCAE,sBAjCA;AAkCAC,0BAlCA;AAmCAC,0BAnCA;AAmCA;AACAC,uBApCA;AAoCA;AACAC;AAAA;AACArC;AACAG,6BADA;AAEA4B;AAFA;AADA,WArCA;AA4CAc;AACAb,sBADA;AAEAc;AAFA,WA5CA;AAgDAR;AACAC;AACAC,8BADA;AACA;AACAC;AAFA;AADA;AAhDA,8CAsDA;AACAhB;AACA;AACA;AACA;AAJA,SAtDA,yCA4DA,QA5DA,0CA6DA;AACAb;AADA,SA7DA,oCAgEA,CAhEA,SAdA;AAiFAmC;AACAhB,wBADA;AAEA5B,qBAFA;AAGA6C,yBAHA;AAIAhD;AAJA,WAKA;AACA+B,wBADA;AAEA5B,sBAFA;AAGA8B,sBAHA;AAIAjC;AAJA,SALA,CAjFA,CA8FA;AACA;AACA;;AAhGA;AAkGA;AACA,KAjJA;AAkJA;AACAiD,iBAnJA,2BAmJA;AACA;AACA;AACA;AACApB;AACAqB,uCADA;AAEAC,wCAFA;AAGAC,qCAHA;AAIAtB;AACAlB;AADA;AAJA;AADA;AAUA;AACA;AACA;AAlKA;AApCA","names":["getConnect","data","chartInstance","allData","type","titleFontSize","xData","created","mounted","window","destroyed","computed","comStyle","fontSize","methods","initChart","grid","left","top","right","bottom","containLabel","xAxis","yAxis","tooltip","trigger","formatter","getData","ret","updateChart","legend","textStyle","name","show","smooth","showSymbol","symbol","symbolSize","markPoint","axisLine","lineStyle","color","width","nameLocation","nameTextStyle","nameGap","axisLabel","interval","series","barWidth","screenAdapter","itemWidth","itemHeight","itemGap"],"sourceRoot":"src/components/page","sources":["contrast.vue"],"sourcesContent":["<!--\r\n * @Author: Tashany\r\n * @Date: 2022-04-16 16:12:09\r\n * @LastEditors: Tashany\r\n * @LastEditTime: 2022-05-10 17:36:32\r\n * @Description: file content\r\n * @FilePath: \\water_admin\\src\\components\\page\\contrast.vue\r\n-->\r\n<template>\r\n    <div class=\"com-container\">\r\n        <div class=\"title\" :style=\"comStyle\">\r\n            <span>▎实际水位高度 VS 5分钟后预测水位高度 （单位 mm）</span>\r\n            <span class=\"iconfont title-icon\"></span>\r\n        </div>\r\n        <div class=\"com-chart\" ref=\"contrast\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {\r\n        getConnect\r\n    } from '@/api/user.js'\r\n    export default {\r\n        data() {\r\n            return {\r\n                chartInstance: null,\r\n                // 返回服务器的数据\r\n                allData: null,\r\n                type: 'line',\r\n                titleFontSize: null, //指明标题字体大小\r\n                xData: null,\r\n            }\r\n        },\r\n        created() {\r\n            // 再组件创建完成时创建回调函数\r\n            this.$socket.registerCallBack(\"contrast\", this.getData)\r\n        },\r\n        mounted() {\r\n            this.initChart()\r\n            this.getData()\r\n            window.addEventListener('resize', this.screenAdapter)\r\n            this.screenAdapter()\r\n            // getConnect()\r\n        },\r\n        destroyed() {\r\n            window.removeEventListener('resize', this.screenAdapter)\r\n            // 销毁时取消回调函数\r\n            this.$socket.unRegisterCallBack(this.getData)\r\n        },\r\n        computed: {\r\n            // 设置给标题的样式\r\n            comStyle() {\r\n                return {\r\n                    fontSize: this.titleFontSize + 'px'\r\n                }\r\n\r\n            }\r\n        },\r\n        methods: {\r\n            // 初始化echartInstance对象\r\n            initChart() {\r\n                this.chartInstance = this.$echarts.init(this.$refs.contrast, 'chalk')\r\n                const initOption = {\r\n                    // 设置直接坐标系坐标轴大写\r\n                    grid: {\r\n                        left: '5%',\r\n                        top: '35%',\r\n                        right: '4%',\r\n                        bottom: '1%',\r\n                        containLabel: true\r\n                    },\r\n                    xAxis: {\r\n                        // 取消间隙\r\n                        type: 'category',\r\n                        // boundaryGap: false\r\n                    },\r\n                    yAxis: {\r\n\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        formatter: '{b0}({a0}): {c0}<br />{b1}({a1}): {c1}%'\r\n                    },\r\n                }\r\n                this.chartInstance.setOption(initOption)\r\n            },\r\n            // 获取服务器数据\r\n            getData(ret) {\r\n                this.allData = JSON.parse(ret)\r\n                this.updateChart()\r\n            },\r\n            // 更新图表\r\n            updateChart() {\r\n                this.xData = this.allData.measureTime.map(item => {\r\n                    return item.split(\" \")[1]\r\n                })\r\n                const y1 = this.allData.waterHeight.map(item => {\r\n                    return item\r\n                })\r\n                const y2 = this.allData.predictionHeight.map(item => {\r\n                    return item\r\n                })\r\n                /*数组排序*/\r\n                this.xData.sort();\r\n                const option = {\r\n                    //图例\r\n                    legend: {\r\n                        data: ['实际水位高度', '预测水位高度'],\r\n                        top: '15%',\r\n                        textStyle: {\r\n                            fontSize: 10,\r\n\r\n                        },\r\n                    },\r\n                    xAxis: {\r\n                        type: 'category',\r\n                        data: this.xData\r\n                    },\r\n                    yAxis: [{\r\n                        type: 'value',\r\n                        name: '实际水位高度',\r\n                        show: true,\r\n                        smooth: true,\r\n                        showSymbol: true,\r\n                        symbol: 'circle', //设定为实心点\r\n                        symbolSize: 3, //设定实心点的大小\r\n                        markPoint: { //显示一定区域内的最大值和最小值\r\n                            data: [{\r\n                                    type: 'max',\r\n                                    name: '最大值'\r\n                                },\r\n                                {\r\n                                    type: 'min',\r\n                                    name: '最小值'\r\n                                }\r\n                            ]\r\n                        },\r\n                        axisLine: {\r\n                            lineStyle: {\r\n                                color: '#5e859e',\r\n                                width: 2\r\n                            }\r\n                        },\r\n                        nameLocation: 'center',\r\n                        nameTextStyle: {\r\n                            fontSize: 10\r\n                        },\r\n                        nameGap: 25\r\n                    }, {\r\n                        type: 'value',\r\n                        name: '预测水位高度',\r\n                        smooth: true,\r\n                        showSymbol: true,\r\n                        symbol: 'circle', //设定为实心点\r\n                        symbolSize: 5, //设定实心点的大小\r\n                        markPoint: { //显示一定区域内的最大值和最小值\r\n                            data: [{\r\n                                    type: 'average',\r\n                                    name: '平均值'\r\n                                }\r\n                            ]\r\n                        },\r\n                        axisLabel: {\r\n                            show: true,\r\n                            interval: 'auto'\r\n                        },\r\n                        axisLine: {\r\n                            lineStyle: {\r\n                                color: '#5e859e', //纵坐标轴和字体颜色\r\n                                width: 2,\r\n                            }\r\n                        },\r\n                        axisLabel: {\r\n                            formatter: function (value) {\r\n                                // Function formatter\r\n                                return value + ' mm'\r\n                            }\r\n                        },\r\n                        nameLocation: 'center',\r\n                        nameTextStyle: {\r\n                            fontSize: 10\r\n                        },\r\n                        nameGap: 5\r\n                    }],\r\n\r\n                    series: [{\r\n                        name: '实际水位高度',\r\n                        type: 'bar',\r\n                        barWidth: '25%',\r\n                        data: y1\r\n                    }, {\r\n                        name: '预测水位高度',\r\n                        type: 'line',\r\n                        smooth: true,\r\n                        data: y2\r\n                    }],\r\n\r\n\r\n                    // legend:{\r\n                    //   data:['水位变化速度']\r\n                    // }\r\n                }\r\n                this.chartInstance.setOption(option)\r\n            },\r\n            // 屏幕大小适配 图标自适应\r\n            screenAdapter() {\r\n                // 得到图标容器宽度-》获取字体大小\r\n                this.titleFontSize = (this.$refs.contrast.offsetWidth / 100) * 3.6\r\n                const adapterOption = {\r\n                    legend: {\r\n                        itemWidth: this.titleFontSize,\r\n                        itemHeight: this.titleFontSize,\r\n                        itemGap: this.titleFontSize,\r\n                        textStyle: {\r\n                            fontSize: this.titleFontSize / 2\r\n                        }\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(adapterOption)\r\n                this.chartInstance.resize()\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .title {\r\n        position: absolute;\r\n        left: 10px;\r\n        top: 10px;\r\n        z-index: 10;\r\n        color: white;\r\n\r\n        .title-icon {\r\n            margin-left: 10px;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n</style>"]}]}