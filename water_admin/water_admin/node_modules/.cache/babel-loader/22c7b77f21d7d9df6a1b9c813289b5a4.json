{"remainingRequest":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js!F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\waterManager\\water_admin\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\waterManager\\water_admin\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\babel.config.js","mtime":1646632679840},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["name","props","config","default","data","gradientId","defaultConfig","shape","waveNum","waveHeight","waveOpacity","colors","formatter","mergedConfig","renderer","svgBorderGradient","details","waves","animation","computed","radius","watch","setTimeout","methods","init","initRender","calcData","mergeConfig","calcSvgBorderGradient","calcDetails","addWave","animationWave","animationFrame","style","drawed","getWaveShapes","points","mergeOffset","getWaveStyle","gradientColor","gradientType","gradientParams","gradientWith","opacity","translate","ctx","repeat","w","graph","mounted","beforeDestroy"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"]}]}