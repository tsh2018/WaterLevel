{"remainingRequest":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js!F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\waterManager\\water_admin\\src\\components\\page\\map.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\waterManager\\water_admin\\src\\components\\page\\map.vue","mtime":1650793579943},{"path":"F:\\waterManager\\water_admin\\babel.config.js","mtime":1646632679840},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAgBA;AACA,SACAA,kBADA,QAEA,sBAFA;AAGA,SACAC,UADA,QAEA,eAFA;AAGA;AACAC,MADA,kBACA;AACA;AACAC,yBADA;AAEA;AACAC,mBAHA;AAIAC,yBAJA,CAIA;;AAJA;AAMA,GARA;AASAC,SATA,qBASA;AACA;AACA;AACAC;AACA,yBAJA,CAKA;AACA,GAfA;AAgBAC,WAhBA,uBAgBA;AACAD;AACA,GAlBA;AAmBAE;AACA;AACAC,YAFA,sBAEA;AACA;AACAC;AADA;AAIA;AAPA,GAnBA;AA4BAC;AACA;AACAC,aAFA,uBAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oFADA,CAEA;;AAFA;AAAA,uBAGAC,wDAHA;;AAAA;AAGAC,mBAHA;;AAIA;AACA;AACA;;AACAC,0BAPA,GAOA;AACAC;AACAC,kCADA;AAEAC,4BAFA;AAGAC;AAHA,mBADA;AAMAC;AACAC,+BADA;AAEAC,gCAFA;AAGAC;AACAC,+CADA;AAEAC;AAFA;AAHA,mBANA;AAcAC;AACAR,8BADA;AAEAS,gCAFA;AAGAC,sCAHA;AAIAC,kCAJA;AAKAC;AACApB;AADA;AALA;AAdA,iBAPA;;AA+BA,0DA/BA,CAgCA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACAqB,wCAJA,GAIAhC,4BAJA,EAKA;;AALA;AAAA,mCAMAc,sDANA;;AAAA;AAMAC,+BANA;;AAOA;;AAEAkB,wCATA,GASA;AACAZ;AACAE;AADA;AADA,6BATA;;AAeA;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkDA,KApDA;AAqDA;AACAW,WAtDA,qBAsDA;AACA;AACA,KAxDA;AAyDA;AACAC,eA1DA,yBA0DA;AACA;AACAC,kBADA;AAEAC,mBACA,WACA,OADA,CADA,CAFA;AAOAC,gBACA,OADA,EAEA,OAFA;AAPA,SAYA;AACAF,kBADA;AAEAC,mBACA,WACA,OADA,CADA,CAFA;AAOAC,gBACA,OADA,EAEA,OAFA;AAPA,OAZA;AAyBA;AACA;AACA;AACA;AACAhB,+BADA;AAEAc,yBAFA;AAGAlC,6BAHA;AAIAqC,iCAJA;AAKAC;AACAC,oBADA;AAEAC;AAFA;AALA;AAUA,OAbA;AAcA;AACAC;AADA;AAGA;AACA,KAtGA;AAuGA;AACAC,iBAxGA,2BAwGA;AACA;AACA;AACA;AACA3B;AACAc;AACApB;AADA;AADA,SADA;AAMAgB;AACAkB,uCADA;AAEAf,wCAFA;AAGAgB,qCAHA;AAIAf;AACApB;AADA;AAJA;AANA;AAeA;AACA;AACA,KA5HA;AA6HA;AACAoC,aA9HA,uBA8HA;AACA;AACA1B;AACAE;AADA;AADA;AAKA;AACA;AArIA;AA5BA","names":["getProvinceMapInfo","getConnect","data","chartInstance","allData","titleFontSize","mounted","window","destroyed","computed","comStyle","fontSize","methods","initChart","axios","ret","initOption","title","text","left","top","geo","type","map","itemStyle","areaColor","borderColor","legend","bottom","orient","itemHeight","textStyle","provinceInfo","changeOption","getData","updateChart","name","location","value","coordinateSystem","rippleEffect","scale","brushType","series","screenAdapter","itemWidth","itemGap","revertMap"],"sourceRoot":"src/components/page","sources":["map.vue"],"sourcesContent":["<!--\r\n * @Author: Tashany\r\n * @Date: 2022-04-18 14:46:30\r\n * @LastEditors: Tashany\r\n * @LastEditTime: 2022-04-24 17:46:19\r\n * @Description: file content\r\n * @FilePath: \\water_admin\\src\\components\\page\\map.vue\r\n-->\r\n<template>\r\n    <div class=\"com-container\" @dblclick=\"revertMap\">\r\n        <div class=\"com-chart\" ref=\"map\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios'\r\n    import {\r\n        getProvinceMapInfo\r\n    } from '@/tools/map_utils.js'\r\n    import {\r\n       getConnect\r\n    } from '@/api/user.js'\r\n    export default {\r\n        data() {\r\n            return {\r\n                chartInstance: null,\r\n                // 返回服务器的数据\r\n                allData: null,\r\n                titleFontSize: null, //指明标题字体大小\r\n            }\r\n        },\r\n        mounted() {\r\n            this.initChart()\r\n            this.getData()\r\n            window.addEventListener('resize', this.screenAdapter)\r\n            this.screenAdapter()\r\n            // getConnect()\r\n        },\r\n        destroyed() {\r\n            window.removeEventListener('resize', this.screenAdapter)\r\n        },\r\n        computed: {\r\n            // 设置给标题的样式\r\n            comStyle() {\r\n                return {\r\n                    fontSize: this.titleFontSize + 'px'\r\n                }\r\n\r\n            }\r\n        },\r\n        methods: {\r\n            // 初始化echartInstance对象\r\n            async initChart() {\r\n                this.chartInstance = this.$echarts.init(this.$refs.map, 'chalk')\r\n                // 获取地图矢量数据\r\n                const ret = await axios.get('http://localhost:8082/static/map/china.json')\r\n                // console.log(ret)\r\n                // 注册地图\r\n                this.$echarts.registerMap('china', ret.data)\r\n                const initOption = {\r\n                    title: {\r\n                        text: '▎检测点分布',\r\n                        left: 20,\r\n                        top: 20\r\n                    },\r\n                    geo: {\r\n                        type: 'map',\r\n                        map: 'china',\r\n                        itemStyle: {\r\n                            areaColor: 'rgb(0,59,81)',\r\n                            borderColor: '#fff'\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        left: '5%',\r\n                        bottom: '5%',\r\n                        orient: 'vartical',\r\n                        itemHeight: 12,\r\n                        textStyle: {\r\n                            fontSize: 12,\r\n                        },\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(initOption)\r\n                // 点击监听事件\r\n                this.chartInstance.on('click', async arg => {\r\n                    // console.log(arg)\r\n                    // arg.name得到所点击的省份，是中文\r\n                    // 判断当前点击省的地图矢量数据是否缓存\r\n                    const provinceInfo = getProvinceMapInfo(arg.name)\r\n                        // 获取该省份矢量数据\r\n                        const ret = await axios.get('http://localhost:8082' + provinceInfo.path)\r\n                        this.$echarts.registerMap(provinceInfo.key, ret.data)\r\n                   \r\n                    const changeOption = {\r\n                        geo: {\r\n                            map: provinceInfo.key,\r\n\r\n                        }\r\n                    }\r\n                    this.chartInstance.setOption(changeOption)\r\n                })\r\n            },\r\n            // 获取服务器数据\r\n            getData() {\r\n                this.updateChart()\r\n            },\r\n            // 更新图表\r\n            updateChart() {\r\n                this.allData = [{\r\n                        name: '武汉',\r\n                        location: [\r\n                            ['114.31',\r\n                                '30.59'\r\n                            ]\r\n                        ],\r\n                        value: [\r\n                            '地铁三号线',\r\n                            '地铁一号线'\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: '成都',\r\n                        location: [\r\n                            ['103.93',\r\n                                '30.58'\r\n                            ]\r\n                        ],\r\n                        value: [\r\n                            '地铁三号线',\r\n                            '地铁一号线'\r\n                        ]\r\n                    }\r\n                ]\r\n                const seriesArr = this.allData.map(item => {\r\n                    // return的对象代表的是一个类别下的所有散点数据\r\n                    // 在地图中显示散点的数据，需要增加一个配置 coordinateSystem\r\n                    return {\r\n                        type: 'effectScatter',\r\n                        name: item.name,\r\n                        data: item.location,\r\n                        coordinateSystem: 'geo',\r\n                        rippleEffect: {\r\n                            scale: 3,\r\n                            brushType: 'stroke'\r\n                        }\r\n                    }\r\n                })\r\n                const option = {\r\n                    series: seriesArr,\r\n                }\r\n                this.chartInstance.setOption(option)\r\n            },\r\n            // 屏幕大小适配 图标自适应\r\n            screenAdapter() {\r\n                // 得到图标容器宽度-》获取字体大小\r\n                this.titleFontSize = (this.$refs.map.offsetWidth / 100) * 3.6\r\n                const adapterOption = {\r\n                    title: {\r\n                        textStyle: {\r\n                            fontSize: this.titleFontSize\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        itemWidth: this.titleFontSize,\r\n                        itemHeight: this.titleFontSize,\r\n                        itemGap: this.titleFontSize,\r\n                        textStyle: {\r\n                            fontSize: this.titleFontSize / 2\r\n                        }\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(adapterOption)\r\n                this.chartInstance.resize()\r\n            },\r\n            // 回到中国地图\r\n            revertMap() {\r\n                const revertOption = {\r\n                    geo: {\r\n                        map: 'china'\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(revertOption)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .title {\r\n        position: absolute;\r\n        left: 20px;\r\n        top: 20px;\r\n        z-index: 10;\r\n        color: white;\r\n\r\n        .title-icon {\r\n            margin-left: 10px;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n</style>"]}]}