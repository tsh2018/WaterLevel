{"remainingRequest":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\waterManager\\water_admin\\src\\components\\page\\map.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\waterManager\\water_admin\\src\\components\\page\\map.vue","mtime":1650793579943},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\waterManager\\water_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\waterManager\\water_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHsKICAgIGdldFByb3ZpbmNlTWFwSW5mbwp9IGZyb20gJ0AvdG9vbHMvbWFwX3V0aWxzLmpzJwppbXBvcnQgewogICBnZXRDb25uZWN0Cn0gZnJvbSAnQC9hcGkvdXNlci5qcycKZXhwb3J0IGRlZmF1bHQgewogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBjaGFydEluc3RhbmNlOiBudWxsLAogICAgICAgICAgICAvLyDov5Tlm57mnI3liqHlmajnmoTmlbDmja4KICAgICAgICAgICAgYWxsRGF0YTogbnVsbCwKICAgICAgICAgICAgdGl0bGVGb250U2l6ZTogbnVsbCwgLy/mjIfmmI7moIfpopjlrZfkvZPlpKflsI8KICAgICAgICB9CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmluaXRDaGFydCgpCiAgICAgICAgdGhpcy5nZXREYXRhKCkKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zY3JlZW5BZGFwdGVyKQogICAgICAgIHRoaXMuc2NyZWVuQWRhcHRlcigpCiAgICAgICAgLy8gZ2V0Q29ubmVjdCgpCiAgICB9LAogICAgZGVzdHJveWVkKCkgewogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNjcmVlbkFkYXB0ZXIpCiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICAvLyDorr7nva7nu5nmoIfpopjnmoTmoLflvI8KICAgICAgICBjb21TdHlsZSgpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLnRpdGxlRm9udFNpemUgKyAncHgnCiAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICAvLyDliJ3lp4vljJZlY2hhcnRJbnN0YW5jZeWvueixoQogICAgICAgIGFzeW5jIGluaXRDaGFydCgpIHsKICAgICAgICAgICAgdGhpcy5jaGFydEluc3RhbmNlID0gdGhpcy4kZWNoYXJ0cy5pbml0KHRoaXMuJHJlZnMubWFwLCAnY2hhbGsnKQogICAgICAgICAgICAvLyDojrflj5blnLDlm77nn6Lph4/mlbDmja4KICAgICAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgYXhpb3MuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjgwODIvc3RhdGljL21hcC9jaGluYS5qc29uJykKICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmV0KQogICAgICAgICAgICAvLyDms6jlhozlnLDlm74KICAgICAgICAgICAgdGhpcy4kZWNoYXJ0cy5yZWdpc3Rlck1hcCgnY2hpbmEnLCByZXQuZGF0YSkKICAgICAgICAgICAgY29uc3QgaW5pdE9wdGlvbiA9IHsKICAgICAgICAgICAgICAgIHRpdGxlOiB7CiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+KWjuajgOa1i+eCueWIhuW4gycsCiAgICAgICAgICAgICAgICAgICAgbGVmdDogMjAsCiAgICAgICAgICAgICAgICAgICAgdG9wOiAyMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGdlbzogewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtYXAnLAogICAgICAgICAgICAgICAgICAgIG1hcDogJ2NoaW5hJywKICAgICAgICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgYXJlYUNvbG9yOiAncmdiKDAsNTksODEpJywKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnNSUnLAogICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJzUlJywKICAgICAgICAgICAgICAgICAgICBvcmllbnQ6ICd2YXJ0aWNhbCcsCiAgICAgICAgICAgICAgICAgICAgaXRlbUhlaWdodDogMTIsCiAgICAgICAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oaW5pdE9wdGlvbikKICAgICAgICAgICAgLy8g54K55Ye755uR5ZCs5LqL5Lu2CiAgICAgICAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5vbignY2xpY2snLCBhc3luYyBhcmcgPT4gewogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYXJnKQogICAgICAgICAgICAgICAgLy8gYXJnLm5hbWXlvpfliLDmiYDngrnlh7vnmoTnnIHku73vvIzmmK/kuK3mlocKICAgICAgICAgICAgICAgIC8vIOWIpOaWreW9k+WJjeeCueWHu+ecgeeahOWcsOWbvuefoumHj+aVsOaNruaYr+WQpue8k+WtmAogICAgICAgICAgICAgICAgY29uc3QgcHJvdmluY2VJbmZvID0gZ2V0UHJvdmluY2VNYXBJbmZvKGFyZy5uYW1lKQogICAgICAgICAgICAgICAgICAgIC8vIOiOt+WPluivpeecgeS7veefoumHj+aVsOaNrgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IGF4aW9zLmdldCgnaHR0cDovL2xvY2FsaG9zdDo4MDgyJyArIHByb3ZpbmNlSW5mby5wYXRoKQogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVjaGFydHMucmVnaXN0ZXJNYXAocHJvdmluY2VJbmZvLmtleSwgcmV0LmRhdGEpCiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlT3B0aW9uID0gewogICAgICAgICAgICAgICAgICAgIGdlbzogewogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IHByb3ZpbmNlSW5mby5rZXksCgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oY2hhbmdlT3B0aW9uKQogICAgICAgICAgICB9KQogICAgICAgIH0sCiAgICAgICAgLy8g6I635Y+W5pyN5Yqh5Zmo5pWw5o2uCiAgICAgICAgZ2V0RGF0YSgpIHsKICAgICAgICAgICAgdGhpcy51cGRhdGVDaGFydCgpCiAgICAgICAgfSwKICAgICAgICAvLyDmm7TmlrDlm77ooagKICAgICAgICB1cGRhdGVDaGFydCgpIHsKICAgICAgICAgICAgdGhpcy5hbGxEYXRhID0gW3sKICAgICAgICAgICAgICAgICAgICBuYW1lOiAn5q2m5rGJJywKICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogWwogICAgICAgICAgICAgICAgICAgICAgICBbJzExNC4zMScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMzAuNTknCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICflnLDpk4HkuInlj7fnur8nLAogICAgICAgICAgICAgICAgICAgICAgICAn5Zyw6ZOB5LiA5Y+357q/JwogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ+aIkOmDvScsCiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IFsKICAgICAgICAgICAgICAgICAgICAgICAgWycxMDMuOTMnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzMwLjU4JwogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWwogICAgICAgICAgICAgICAgICAgICAgICAn5Zyw6ZOB5LiJ5Y+357q/JywKICAgICAgICAgICAgICAgICAgICAgICAgJ+WcsOmTgeS4gOWPt+e6vycKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgICAgY29uc3Qgc2VyaWVzQXJyID0gdGhpcy5hbGxEYXRhLm1hcChpdGVtID0+IHsKICAgICAgICAgICAgICAgIC8vIHJldHVybueahOWvueixoeS7o+ihqOeahOaYr+S4gOS4quexu+WIq+S4i+eahOaJgOacieaVo+eCueaVsOaNrgogICAgICAgICAgICAgICAgLy8g5Zyo5Zyw5Zu+5Lit5pi+56S65pWj54K555qE5pWw5o2u77yM6ZyA6KaB5aKe5Yqg5LiA5Liq6YWN572uIGNvb3JkaW5hdGVTeXN0ZW0KICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VmZmVjdFNjYXR0ZXInLAogICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBpdGVtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVTeXN0ZW06ICdnZW8nLAogICAgICAgICAgICAgICAgICAgIHJpcHBsZUVmZmVjdDogewogICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogMywKICAgICAgICAgICAgICAgICAgICAgICAgYnJ1c2hUeXBlOiAnc3Ryb2tlJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXNBcnIsCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihvcHRpb24pCiAgICAgICAgfSwKICAgICAgICAvLyDlsY/luZXlpKflsI/pgILphY0g5Zu+5qCH6Ieq6YCC5bqUCiAgICAgICAgc2NyZWVuQWRhcHRlcigpIHsKICAgICAgICAgICAgLy8g5b6X5Yiw5Zu+5qCH5a655Zmo5a695bqmLeOAi+iOt+WPluWtl+S9k+Wkp+WwjwogICAgICAgICAgICB0aGlzLnRpdGxlRm9udFNpemUgPSAodGhpcy4kcmVmcy5tYXAub2Zmc2V0V2lkdGggLyAxMDApICogMy42CiAgICAgICAgICAgIGNvbnN0IGFkYXB0ZXJPcHRpb24gPSB7CiAgICAgICAgICAgICAgICB0aXRsZTogewogICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogdGhpcy50aXRsZUZvbnRTaXplCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxlZ2VuZDogewogICAgICAgICAgICAgICAgICAgIGl0ZW1XaWR0aDogdGhpcy50aXRsZUZvbnRTaXplLAogICAgICAgICAgICAgICAgICAgIGl0ZW1IZWlnaHQ6IHRoaXMudGl0bGVGb250U2l6ZSwKICAgICAgICAgICAgICAgICAgICBpdGVtR2FwOiB0aGlzLnRpdGxlRm9udFNpemUsCiAgICAgICAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiB0aGlzLnRpdGxlRm9udFNpemUgLyAyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oYWRhcHRlck9wdGlvbikKICAgICAgICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnJlc2l6ZSgpCiAgICAgICAgfSwKICAgICAgICAvLyDlm57liLDkuK3lm73lnLDlm74KICAgICAgICByZXZlcnRNYXAoKSB7CiAgICAgICAgICAgIGNvbnN0IHJldmVydE9wdGlvbiA9IHsKICAgICAgICAgICAgICAgIGdlbzogewogICAgICAgICAgICAgICAgICAgIG1hcDogJ2NoaW5hJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24ocmV2ZXJ0T3B0aW9uKQogICAgICAgIH0KICAgIH0KfQo="},{"version":3,"sources":["map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"map.vue","sourceRoot":"src/components/page","sourcesContent":["<!--\r\n * @Author: Tashany\r\n * @Date: 2022-04-18 14:46:30\r\n * @LastEditors: Tashany\r\n * @LastEditTime: 2022-04-24 17:46:19\r\n * @Description: file content\r\n * @FilePath: \\water_admin\\src\\components\\page\\map.vue\r\n-->\r\n<template>\r\n    <div class=\"com-container\" @dblclick=\"revertMap\">\r\n        <div class=\"com-chart\" ref=\"map\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios'\r\n    import {\r\n        getProvinceMapInfo\r\n    } from '@/tools/map_utils.js'\r\n    import {\r\n       getConnect\r\n    } from '@/api/user.js'\r\n    export default {\r\n        data() {\r\n            return {\r\n                chartInstance: null,\r\n                // 返回服务器的数据\r\n                allData: null,\r\n                titleFontSize: null, //指明标题字体大小\r\n            }\r\n        },\r\n        mounted() {\r\n            this.initChart()\r\n            this.getData()\r\n            window.addEventListener('resize', this.screenAdapter)\r\n            this.screenAdapter()\r\n            // getConnect()\r\n        },\r\n        destroyed() {\r\n            window.removeEventListener('resize', this.screenAdapter)\r\n        },\r\n        computed: {\r\n            // 设置给标题的样式\r\n            comStyle() {\r\n                return {\r\n                    fontSize: this.titleFontSize + 'px'\r\n                }\r\n\r\n            }\r\n        },\r\n        methods: {\r\n            // 初始化echartInstance对象\r\n            async initChart() {\r\n                this.chartInstance = this.$echarts.init(this.$refs.map, 'chalk')\r\n                // 获取地图矢量数据\r\n                const ret = await axios.get('http://localhost:8082/static/map/china.json')\r\n                // console.log(ret)\r\n                // 注册地图\r\n                this.$echarts.registerMap('china', ret.data)\r\n                const initOption = {\r\n                    title: {\r\n                        text: '▎检测点分布',\r\n                        left: 20,\r\n                        top: 20\r\n                    },\r\n                    geo: {\r\n                        type: 'map',\r\n                        map: 'china',\r\n                        itemStyle: {\r\n                            areaColor: 'rgb(0,59,81)',\r\n                            borderColor: '#fff'\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        left: '5%',\r\n                        bottom: '5%',\r\n                        orient: 'vartical',\r\n                        itemHeight: 12,\r\n                        textStyle: {\r\n                            fontSize: 12,\r\n                        },\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(initOption)\r\n                // 点击监听事件\r\n                this.chartInstance.on('click', async arg => {\r\n                    // console.log(arg)\r\n                    // arg.name得到所点击的省份，是中文\r\n                    // 判断当前点击省的地图矢量数据是否缓存\r\n                    const provinceInfo = getProvinceMapInfo(arg.name)\r\n                        // 获取该省份矢量数据\r\n                        const ret = await axios.get('http://localhost:8082' + provinceInfo.path)\r\n                        this.$echarts.registerMap(provinceInfo.key, ret.data)\r\n                   \r\n                    const changeOption = {\r\n                        geo: {\r\n                            map: provinceInfo.key,\r\n\r\n                        }\r\n                    }\r\n                    this.chartInstance.setOption(changeOption)\r\n                })\r\n            },\r\n            // 获取服务器数据\r\n            getData() {\r\n                this.updateChart()\r\n            },\r\n            // 更新图表\r\n            updateChart() {\r\n                this.allData = [{\r\n                        name: '武汉',\r\n                        location: [\r\n                            ['114.31',\r\n                                '30.59'\r\n                            ]\r\n                        ],\r\n                        value: [\r\n                            '地铁三号线',\r\n                            '地铁一号线'\r\n                        ]\r\n                    },\r\n                    {\r\n                        name: '成都',\r\n                        location: [\r\n                            ['103.93',\r\n                                '30.58'\r\n                            ]\r\n                        ],\r\n                        value: [\r\n                            '地铁三号线',\r\n                            '地铁一号线'\r\n                        ]\r\n                    }\r\n                ]\r\n                const seriesArr = this.allData.map(item => {\r\n                    // return的对象代表的是一个类别下的所有散点数据\r\n                    // 在地图中显示散点的数据，需要增加一个配置 coordinateSystem\r\n                    return {\r\n                        type: 'effectScatter',\r\n                        name: item.name,\r\n                        data: item.location,\r\n                        coordinateSystem: 'geo',\r\n                        rippleEffect: {\r\n                            scale: 3,\r\n                            brushType: 'stroke'\r\n                        }\r\n                    }\r\n                })\r\n                const option = {\r\n                    series: seriesArr,\r\n                }\r\n                this.chartInstance.setOption(option)\r\n            },\r\n            // 屏幕大小适配 图标自适应\r\n            screenAdapter() {\r\n                // 得到图标容器宽度-》获取字体大小\r\n                this.titleFontSize = (this.$refs.map.offsetWidth / 100) * 3.6\r\n                const adapterOption = {\r\n                    title: {\r\n                        textStyle: {\r\n                            fontSize: this.titleFontSize\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        itemWidth: this.titleFontSize,\r\n                        itemHeight: this.titleFontSize,\r\n                        itemGap: this.titleFontSize,\r\n                        textStyle: {\r\n                            fontSize: this.titleFontSize / 2\r\n                        }\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(adapterOption)\r\n                this.chartInstance.resize()\r\n            },\r\n            // 回到中国地图\r\n            revertMap() {\r\n                const revertOption = {\r\n                    geo: {\r\n                        map: 'china'\r\n                    }\r\n                }\r\n                this.chartInstance.setOption(revertOption)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .title {\r\n        position: absolute;\r\n        left: 20px;\r\n        top: 20px;\r\n        z-index: 10;\r\n        color: white;\r\n\r\n        .title-icon {\r\n            margin-left: 10px;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n</style>"]}]}